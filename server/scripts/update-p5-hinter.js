const fs = require('fs');
const process = require('process');
const axios = require('axios');

// const getDescription = (d) => {
//   return d.split('\n')[0].replace('<p>', '');
// };

const reservedKeywords = [
  'await',
  'break',
  'case',
  'catch',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'else',
  'export',
  'extends',
  'finally',
  'for',
  'function',
  'if',
  'import',
  'in',
  'instanceof',
  'new',
  'return',
  'super',
  'switch',
  'this',
  'throw',
  'try',
  'typeof',
  'var',
  'void',
  'while',
  'with',
  'yield',
  'let'
];

const reservedObjects = [
  'Array',
  'Boolean',
  'Date',
  'Error',
  'Function',
  'JSON',
  'Math',
  'Number',
  'Object',
  'RegExp',
  'String',
  'Promise',
  'Set',
  'Map',
  'Symbol',
  'WeakMap',
  'WeakSet',
  'ArrayBuffer',
  'DataView',
  'Int32Array',
  'Uint32Array',
  'Float32Array',
  'window',
  'document',
  'navigator',
  'console',
  'localStorage',
  'sessionStorage',
  'history',
  'location'
];

axios
  .get('https://p5js.org/reference/data.json')
  .then((response) => {
    const { data } = response;

    const arr = data.classitems;
    const p5Keywords = [];

    arr.forEach((obj) => {
      if (
        obj.class === 'p5' &&
        obj.module !== 'Foundation' &&
        obj.name &&
        obj.itemtype
      ) {
        let type;
        let params = [];
        if (obj.itemtype === 'method') {
          type = 'fun';

          params = obj.params?.map((param) => ({
            p: param.name, // param name
            o: param.optional ?? false // optional
          }));
        } else if (obj.itemtype === 'property') {
          type = 'var';
        } else type = 'attr';

        p5Keywords.push({
          text: obj.name,
          type,
          params,
          p5: true
        });
      }
    });

    reservedKeywords.forEach((keyword) => {
      p5Keywords.push({
        text: keyword,
        type: 'keyword',
        p5: false
      });
    });

    reservedObjects.forEach((keyword) => {
      p5Keywords.push({
        text: keyword,
        type: 'obj',
        p5: false
      });
    });

    const keywords = JSON.stringify(p5Keywords);

    let generatedCode = '/* eslint-disable */\n';
    generatedCode +=
      '/* generated: do not edit! helper file for hinter.' +
      ' generated by update-p5-hinter script */\n';
    generatedCode += `exports.p5Hinter = ${keywords};\n`;

    fs.writeFile(
      `${process.cwd()}/client/utils/p5-hinter.js`,
      generatedCode,
      (error) => {
        if (error) {
          console.log("Error!! Couldn't write to the file", error);
        } else {
          console.log('Hinter files updated successfully');
        }
      }
    );
  })
  .catch((err) => {
    throw err;
  });
